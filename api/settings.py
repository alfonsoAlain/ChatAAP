"""
Django settings for AICSbadgeBackEndApi project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from django.urls import reverse_lazy

from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i5u=z(7gz4xu!k9vo@vtjst*+v5#_zazgu=uvu30&zk!7ovw^3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', "10.0.2.2"]

CORS_ALLOWED_ORIGINS = ["http://localhost:4200", "https://invesport-latam.com"]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True   # Permitir el envío de cookies

# settings.py

CSRF_TRUSTED_ORIGINS = [
    'https://5.79.126.239:8000',
    'https://5.79.126.239',
    'https://invesport-latam.com',
    'https://invesport-latam.com:5000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',

    # # Filtros
    # 'django_filters',
    # # Imagenes
    # 'versatileimagefield',
    # Recolector de basura
    # 'django_cleanup.apps.CleanupConfig',

    # Autenticacion---
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.linkedin',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'channels',

    # # Estandarizacion de errores ---
    # "drf_standardized_errors",
    # # Swagger
    # 'drf_yasg',

    # Apps ----
    'usuario',
    'message',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
    # 'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': []
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #    'ENGINE': 'django.db.backends.mysql',
    #    'NAME': 'inversor',
    #    'USER': 'root',
    #    'PASSWORD': 'integro123.',
    #    'HOST': '172.17.0.1',  # o la IP del servidor MySQL si no está en local
    #    'PORT': '3306',  # el puerto por defecto de MySQL
    # }
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Imprescindible para relacionar user con mi tabla usuario
AUTH_USER_MODEL = 'usuario.Usuario'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Authentication ---------------

# AUTH_USER_MODEL = 'user.User'

AUTHENTICATION_BACKENDS = [
    # Autenticacion principal
    'allauth.account.auth_backends.AuthenticationBackend',
    # Autenticacion necesaria para DjangoAdmin
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    # ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ),
    # "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,  # Tamaño de página predeterminado
    # 'MAX_PAGE_SIZE': 100,  # Valor máximo que se puede solicitar
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=20),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
    'ROTATE_REFRESH_TOKENS': True,
}

# REST_AUTH_REGISTER_SERIALIZERS = {
#     'REGISTER_SERIALIZER': 'user.serializers.UserRegisterSerializer',
# }
#
# REST_AUTH_SERIALIZERS = {
#     'USER_DETAILS_SERIALIZER': 'user.serializers.UserDetailSerializer',
# }

REST_AUTH = {
    'SESSION_LOGIN': False,
    'USE_JWT': True,
    'JWT_AUTH_HTTPONLY': False,
    'OLD_PASSWORD_FIELD_ENABLED': True,
    # 'USER_DETAILS_SERIALIZER': 'user.serializers.UserDetailSerializer',
    # 'REGISTER_SERIALIZER': 'user.serializers.UserRegisterSerializer',
    # 'PASSWORD_RESET_SERIALIZER': 'user.serializers.CustomPasswordResetSerializer',
}

FRONT_PROTOCOL = "https://"
FRONT_DOMAIN_NAME = "invesport-latam.com"
URL_FRONT = FRONT_PROTOCOL + FRONT_DOMAIN_NAME + "/"
LOGIN_URL = URL_FRONT + "login"
LOGIN_REDIRECT_URL = URL_FRONT + "login"

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # O solo 'username
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "none"

# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # mandatory
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_URL
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = LOGIN_URL
#
# EMAIL_VERIFICATION_URL_NOT_VALID_URL = URL_FRONT + "validation-error"
#
# ACCOUNT_PASSWORD_RESET_CONFIRM_URL = URL_FRONT + 'forgot-password/new-password'

# SOCIALACCOUNT_LOGIN_ON_GET = True

# # Email configuration
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'cuentaparacosas100@gmail.com'
# EMAIL_HOST_PASSWORD = 'urbrjgkzfyhovpct'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = 'aics@gmail.com'

# SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# SOCIALACCOUNT_PROVIDER = {
#     'github': {
#         'scope': ('user:email',)
#     },
#     'google': {
#         'SCOPE': [
#             'profile',
#             'email',
#         ]
#     }
# }

# SESSION_COOKIE_SAMESITE = 'Lax'
# SESSION_COOKIE_SECURE = False# Cambia a True una vez que tengas HTTPS
# CSRF_COOKIE_SAMESITE = 'None'
# CSRF_COOKIE_SECURE = False# Cambiar a True una vez que tengas HTTPS

SESSION_COOKIE_SAMESITE = 'Lax'  # o 'Strict' si lo prefieres
SESSION_COOKIE_SECURE = False  # Para que funcione en HTTP
CSRF_COOKIE_SAMESITE = 'Lax'    # Igualmente, puedes utilizar 'Strict'
CSRF_COOKIE_SECURE = False       # Para que funcione en HTTP

# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
#CELERY_BEAT_SCHEDULE = {
#    'actualizar-valores-acciones': {
#        'task': 'equipo.tasks.actualizar_valor_inicial_accion',
#        # 'schedule': crontab(minute='*/1'),  # Cada minuto
#        'schedule': crontab(hour=10, minute=0),
#    },
#    'actualizar_ranking_usuarios': {
#        'task': 'ranking_usuario.tasks.calculate_user_ranking',
#        'schedule': crontab(hour=10, minute=0),
#        # 'schedule': crontab(hour=10, minute=0, day_of_week='monday'),
#    },
#}

CELERY_IMPORTS = (
    'equipo.tasks',
    'ranking_usuario.tasks',
)

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'investport2024@gmail.com'
EMAIL_HOST_PASSWORD = 'ppytkoweptajpcpm'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'no-reply@invesport-latam.com'

ASGI_APPLICATION = 'api.asgi.application' # Para web socket

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',  # Para desarrollo
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',  # Para producción
        # 'CONFIG': {
        #     "hosts": [('127.0.0.1', 6379)],
        # },
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
}

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'